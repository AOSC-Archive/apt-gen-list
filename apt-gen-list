#!/bin/bash

# Utility for generating sources.list for APT according to available
# repository configurations.

# Completely rewritten by Junde Yhi. This new version requires:
#
# - All config files should be put in /etc/apt/sources.list.d, since all files
#   will be modified in-place.
# - All config files should use the new 'deb822' style supported by new APT.
#
# Architecture detection is not done by this script; instead, new version of APT
# can directly make use of '$(ARCH)' variable in configuration files, so we also
# make use of this great feature.

# Copyleft Mingcong Bai <jeffbai@aosc.xyz>, 2016.
# Copyleft Junde Yhi <lmy441900@aosc.xyz>, 2017.
# Licensed under WTFPL.

SRCCFGPATH="/etc/apt/sources.list.d" # Where the config files are put.
# SRCCFGPATH="conf"
SUPPORTS_OVERLAY=false

# Listing available repositories.
function list_sources {
    echo -e "Available sources:\n"
    echo -e "Repo Name\tDescription" # Table Header
    echo -e "\
--------------------------------------------------------------------------------\
"
    for i in `find $SRCCFGPATH -type f | sort`; do
        grep -r "Enabled:\ yes" $i > /dev/null 2>&1 # Querying repository status (enabled/disabled)
        if [[ $? == 0 ]]; then
            printf "\e[32m$i\e[39m\t\t" | sed -e "s@$SRCCFGPATH/@@g" | sed -e "s@\.sources@@g"
        else
            printf "\e[31m$i\e[39m\t\t" | sed -e "s@$SRCCFGPATH/@@g" | sed -e "s@\.sources@@g"
        fi
        head -n 1 $i | sed -e "s@#\ @@g" # Description
    done
    echo -e "\
--------------------------------------------------------------------------------

Printed above is a full list of available repositories/mirrors. Green config
names indicate \e[32menabled\e[39m repositories while red names indicate \e[31mdisabled\e[39m
repositories.

Specify the 'Repo Name's to enable or disable repositories. Besides these names,
you can also specify \e[1mall\e[21m to enable or disable all repositories."

    # Show a list of supported features to indicate overlay status.
    detect_features
}

# Help info.
function show_help {
    echo -e "\

Usage: $0 -e \"repo1 repo2 ...\" -d \"repo1 repo2 ...\"

Utility for switching AOSC OS APT repository configurations.

  -l    List available repositories.
  -e    Enable repositories.
  -d    Disable repositories.
  -O    Enable Overlay.
  -h    Display help.

Note: To enable / disable multiple sources, you may either put them in a pair of
quotation marks, or specify \`-e\` for each repository to operate.

Overlay is a new method to make full use of your computer's CPU and boost your
system. You can only enable it when your processor supports AOSC OS Overlay,
otherwise you will suffer from crashes. To see if your processor supports
Overlay, use \`$0 -l\`. For details, see
<https://github.com/AOSC-Dev/aosc-os-abbs>.

Written by Junde Yhi <lmy441900@aosc.xyz>
Report bugs to <https://github.com/AOSC-Dev/apt-gen-list/issues>.
"
}

# Check configuration file availability.
# @param $1 enabling / disabling list.
# FIXME: TOCTOU.
function check_config_avail {
    local p=0
    local e=0

    for i in $1; do
        if [[ -f "$SRCCFGPATH/$i.sources" ]]; then
            if [[ ! -w "$SRCCFGPATH/$i.sources" ]]; then
                echo -e "*** $SRCCFGPATH/$i.sources is NOT writable."
                p=1
            fi
        else
            echo -e "*** $SRCCFGPATH/$i.sources does NOT exist."
            e=1
        fi
    done

    if [[ $p == 1 ]]; then
        if [[ $(id -u) != "0" ]]; then
            echo -e "\n\
Some configurations are not writable because I do not have sufficient privilege.
Use \`sudo !!\` to try again."
            exit 1
        else
            echo -e "\n\
Some configurations are not writable; they may have wrong modes on them. You may
want to check them by yourself."
            exit 1
        fi
    fi

    if [[ $e == 1 ]]; then
        echo -e "\n\
Some configurations are missing; maybe you have specified wrong config names?"
        exit 2
    fi
}

# Detect platform features that is needed for AOSC optimized overlay.
function detect_features {
    case "$(uname -m)" in
        x86_64|i?86) _detect_features_amd64 ;;
        armv7l|armv8l) _detect_features_arm ;;
        ppc|ppc64) _detect_features_ppc ;;
        mips|mips64) _detect_features_mips ;;
        *) echo -e "This architecture is not supported by AOSC OS." ;;
    esac
}

# Detect AMD64 Overlay requirements, depending on the 'flags' sections in
# /proc/cpuinfo.
function _detect_features_amd64 {
    grep "flags" /proc/cpuinfo | grep "avx2" > /dev/null 2>&1
    if [[ $? == 0 ]]; then
        echo -e "\n\
Your computer supports \e[32mAdvanced Vector Extensions 2 (AVX2)\e[39m, which means you can
enable an Overlay to improve your computer's performance."
        SUPPORTS_OVERLAY=true
    fi
}

# Detect ARM Overlay requirements.
function _detect_features_arm {
    # TODO
    printf "\nYour ARM device name is "
    DEVNAME=`cat /etc/aosc-arm.conf | grep DEVICE_NAME`
    if [[ ! -z $DEVNAME ]]; then
        echo -e "\e[32m$DEVNAME\e[39m"
        SUPPORTS_OVERLAY=true
    fi
}

# Detect PowerPC Overlay requirements, depending on the 'cpu' sections in
# /proc/cpuinfo.
function _detect_features_ppc {
    grep "cpu" /proc/cpuinfo | grep "altivec" > /dev/null 2>&1
    if [[ $? == 0 ]]; then
        echo -e "\n\
Your computer supports \e[32mAltiVec\e[39m, which means you can enable an Overlay to
improve your computer's performance."
        SUPPORTS_OVERLAY=true
    fi
}

# Detect MIPS Overlay requirements.
function _detect_features_mips {
    grep "cpu\ model" /proc/cpuinfo | grep -i "loongson" > /dev/null 2>&1
    if [[ $? == 0 ]]; then
        grep "ASEs\ implemented" /proc/cpuinfo | grep "dsp2" > /dev/null 2>&1
        if [[ $? == 0 ]]; then
            echo -e "\n\
Your computer is a \e[32mLoongson\e[39m machine supporting \e[32mMIPS DSPr2 ASE\e[39m, which means you
can enable an Overlay to improve your computer's performance."
            SUPPORTS_OVERLAY=true
        fi
    fi
}

# Enabling Overlay.
# This function will insert a source block on top of available source files.
function enable_overlays {
    detect_features
    # Check if we can really enable Overlay.
    if [[ $SUPPORTS_OVERLAY == false ]]; then
        echo -e "Your computer does not support Overlay, so you cannot enable it."
        exit 1
    fi

    # Check config availability.
    check_config_avail "`find $SRCCFGPATH -type f | sort | sed -e "s@$SRCCFGPATH/@@g" | sed -e "s@\.sources@@g" | xargs`"

    # See if Overlay has been already enabled.
    for f in $SRCCFGPATH/*.sources; do
        grep -r "## Overlay enabled by apt-gen-list." $f > /dev/null 2>&1
        if [[ $? == 0 ]]; then
            echo -e "It seems that you have enabled Overlay before!"
            exit 1
        fi
    done

    # Different architectures use different overlay directory names in the package repository. For example, on MIPS64:
    #   https://repo.aosc.io/os-mips64el/os3-dpkg
    # contains packages compiled with general flags, while
    #   https://repo.aosc.io/os-mips64el/ls3a2kc+/os3-dpkg
    # contains packages compiled with `-march=loongson3a -mdsp -mdspr2` (only compatible with Loongson-3A2000C and newer processors).
    #
    # Multiple overlays are seperated with spaces, e.g. on AMD64: "haswell+ avx512+"

    # Adapted from autobuild3.
    case "$(uname -m)" in
            x86_64) ARCH_NAME=amd64 ;;
            i?86) ARCH_NAME=i386 ;;
            armv7l) ARCH_NAME=armel ;;
            armv8l) ARCH_NAME=arm64 ;;
            ppc) ARCH_NAME=powerpc ;;
            ppc64) ARCH_NAME=ppc64 ;;
            mips64) ARCH_NAME=mips64el ;;
            *) ARCH_NAME=`uname -m` ;;
    esac

    case "$(uname -m)" in
        x86_64|i?86) OVERLAY_DIRNAME="haswell+" ;;
        armv7l|armv8l) OVERLAY_DIRNAME="overlay" ;;
        ppc|ppc64) OVERLAY_DIRNAME="altivec" ;;
        mips|mips64) OVERLAY_DIRNAME="ls3a2kc+" ;;
        *) OVERLAY_DIRNAME="overlay" ;;
    esac

    echo -e "We are now enabling Overlay for you..."

    for f in $SRCCFGPATH/*.sources; do
        echo -e "\n## Overlay enabled by apt-gen-list." >> $f
        for i in $OVERLAY_DIRNAME; do
            grep -r "Enabled: " $f | head -n 1 >> $f
            echo -e "Types:   deb" >> $f
            grep -r "URIs" $f | grep 'os-$(ARCH)/os3-dpkg' | sed -e "s@os-\$(ARCH)@os-\$(ARCH)/$i@g" >> $f
            echo -e "Suites:  /" >> $f
        done
    done

    # Generate apt_preference.
    echo -e "\
Explanation: Ensure Overlay Packages are installed first.
Explanation: If you prefer generic packages, downgrade the priority below 500.
Package: *
Pin: release l=AOSC OS ($ARCH_NAME/$OVERLAY_DIRNAME)
Pin-Priority: 995" > `dirname $SRCCFGPATH`/preference

    echo -e "Seems good. You can now upgrade your system to obtain better performance."
}

# Enabling specified repositories
# FIXME: DRY, merge with disable_repos.
function enable_repos {
    # If there is an 'all', enabling / disabling all repositories.
    if [[ "$ENABLE" == *all* ]]; then
        ENABLE=`find $SRCCFGPATH -type f | sort | sed -e "s@$SRCCFGPATH/@@g" | sed -e "s@\.sources@@g" | xargs`
    fi

    check_config_avail "$ENABLE"
    for i in $ENABLE; do
        sed --in-place --expression="s@Enabled:\ no@Enabled:\ yes@g" $SRCCFGPATH/$i.sources
    done
}

# Disabling specified repositories
function disable_repos {
    # If there is an 'all', enabling / disabling all repositories.
    if [[ "$DISABLE" == *all* ]]; then
        DISABLE=`find $SRCCFGPATH -type f | sort | sed -e "s@$SRCCFGPATH/@@g" | sed -e "s@\.sources@@g" | xargs`
    fi

    check_config_avail "$DISABLE"
    for i in $DISABLE; do
        sed --in-place --expression="s@Enabled:\ yes@Enabled:\ no@g" $SRCCFGPATH/$i.sources
    done
}

# Full map logic.
while getopts ":hle:d:O" switches; do
    case "$switches" in
        l)
            list_sources
            exit 0
            ;;
        e)
            ENABLE+="$OPTARG "
            # Indicates who goes first, disabling or enabling. This may slightly improve UX.
            [[ ! -z $enable_first || ! -z $disable_first ]] || enable_first=1
            ;;
        d)
            DISABLE+="$OPTARG "
            [[ ! -z $enable_first || ! -z $disable_first ]] || disable_first=1
            ;;
        O)
            enable_overlays
            exit 0
            ;;
        h)
            show_help
            exit 0
            ;;
        \?)
            echo -e "Invalid option: -$OPTARG."
            show_help
            exit 1
            ;;
        \:)
            echo -e "Option -$OPTARG requires an argument."
            show_help
            exit 1
            ;;
    esac
done

# Display first.
if [[ $enable_first ]]; then
    [[ -z "$ENABLE" ]]  || echo -e "Enabling:  $ENABLE"
    [[ -z "$DISABLE" ]] || echo -e "Disabling: $DISABLE\n"
else
    [[ -z "$DISABLE" ]] || echo -e "Disabling: $DISABLE"
    [[ -z "$ENABLE" ]]  || echo -e "Enabling:  $ENABLE\n"
fi

if [[ $enable_first ]]; then
    [[ -z "$ENABLE" ]]  || enable_repos
    [[ -z "$DISABLE" ]] || disable_repos
else
    [[ -z "$DISABLE" ]] || disable_repos
    [[ -z "$ENABLE" ]]  || enable_repos
fi

# Always list current status after operations; even when no arguments were passed.
list_sources
