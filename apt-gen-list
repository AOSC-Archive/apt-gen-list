#!/usr/bin/env python3

# Copyright (C) 2018 Lion Yang <lion@aosc.io>
#
# Utility for generating sources.list for APT according to available
# repository configurations.
#
# Licensed under WTFPL.

import gettext
import json
import logging
import os
import sys
import yaml

CONF_PATH = '/var/lib/apt/gen/status.json'
REPO_DATA_DIR = '/usr/share/distro-repository-data'
DEBS_URL = '/debs'
REPORT_BUG = 'https://github.com/AOSC-Dev/apt-gen-list/issues'

_ = gettext.translation('apt-gen-list', fallback=True).gettext
logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')
HELP_MESSAGE = _('''
Usage: apt-gen-list [stdout] [m [-|+]MIRROR1 ...] [c [-|+]COMP1 ...] [b BRANCH]
       apt-gen-list now
       apt-gen-list avail
       apt-gen-list help

Keywords:
    "mirror" is equivalent to "m";
    "branch" is equivalent to "b";
    "component" is equivalent to "c".

Examples:
    1. To set mirrors to "origin" and "baz":
        # apt-gen-list mirror origin baz

    2. To disable mirror "origin":
        # apt-gen-list mirror -origin

    3. To enable component "opt-avx2" and disable "bsp-sunxi":
        # apt-gen-list c +opt-avx2 -bsp-sunxi

    4. To set the branch to "testing":
        # apt-gen-list b testing

    5. To set the branch to "testing" and enable component "bsp-sunxi":
        # apt-gen-list branch testing component +bsp-sunxi

    6. To disable component "main":
        # apt-gen-list c -main
        => This is a no-op because "main" is mandatory

    7. To reset everything to default values:
        # apt-gen-list m b c
        => It is equivalent to
        # apt-gen-list mirror origin branch stable component main

    8. To re-generate sources.list:
        # apt-gen-list

Report bugs to <%s>.
''') % REPORT_BUG

MIRRORS_PATH = REPO_DATA_DIR + '/mirrors.yml'
BRANCHES_PATH = REPO_DATA_DIR + '/branches.yml'
COMPS_PATH = REPO_DATA_DIR + '/comps.yml'
OUTPUT_PATH = '/etc/apt/sources.list'
conf = {}
mirrors = {}
branches = {}
components = {}
full_args = sys.argv[1:]
parser_failed = 0


def create_set(key: str):
    if key not in conf:
        # Make a new set()
        conf[key] = set()
    else:
        # Convert to set, because json can only have list
        conf[key] = set(conf[key])


def create_str(key: str):
    if key not in conf:
        conf[key] = ''


def recover_list_key():
    for key in conf:
        if type(conf[key]) is set:
            conf[key] = list(conf[key])
            conf[key].sort()


def is_change_or_set(key: str, ops: list):
    global parser_failed
    mode = 'unknown'
    for op in ops:  # Check the consistency
        is_change = op.startswith('+') or op.startswith('-')
        if mode == 'unknown':
            mode = 'change' if is_change else 'set'
        if is_change ^ (mode == 'change'):
            logging.error(
                _('You cannot change and set "%s" at the same time: ') + ' '.join(ops),
                key)
            parser_failed += 1
    return mode


def modify(key: str, ops: list):
    if is_change_or_set(key, ops) == 'change':
        for op in ops:
            if op.startswith('+'):
                conf[key].add(op[1:])
            else:
                conf[key].remove(op[1:])
    else:
        conf[key] = set(ops)


def parse_mirror(args: list):
    modify('mirror', args)


def parse_branch(args: list):
    global parser_failed
    if len(args) > 1:
        logging.error(_('You may only specify one branch.'))
        parser_failed += 1
        return
    if len(args) == 0:
        conf['branch'] == ''
    else:
        conf['branch'] = args[0]


def parse_comp(args: list):
    modify('component', args)


def sanitize_mirror():
    conf_mirror = conf['mirror'].copy()
    for mirror in conf['mirror']:
        if mirror not in mirrors:
            logging.warn(
                _('Mirror "%s" does not exist and will be removed.'), mirror)
            conf_mirror.remove(mirror)
    conf['mirror'] = conf_mirror
    if len(conf['mirror']) == 0:
        # There must be at least one mirror. Use "origin"
        conf['mirror'].add('origin')


def sanitize_branch():
    # branch is mandatory
    branch = conf['branch']
    if branch.startswith('+') or branch.startswith('-'):
        logging.warn(
            _('It seems that you are trying to add/delete a branch, please specify a branch directly.'))
    if branch == '':
        conf['branch'] = 'stable'
    if conf['branch'] not in branches:
        logging.error(_('Branch "%s" does not exist.'), branch)
        exit(3)


def sanitize_component():
    conf_comp = conf['component'].copy()
    for comp in conf['component']:
        if comp not in components:
            logging.warn(
                _('Component "%s" does not exist and will be removed.'), comp)
            conf_comp.remove(comp)
    conf['component'] = conf_comp
    # "main" is mandatory
    conf['component'].add('main')


def show_status():
    print(_('mirrors: %s') % (' '.join(sorted(conf['mirror']))))
    print(_('components: %s') % (' '.join(sorted(conf['component']))))
    print(_('branch: %s') % conf['branch'])


def show_available():
    def p(k: str, d: str):
        print('[%s] %s' % (k.rjust(10), d))
    print(_('== Branches =='))
    for branch_name in branches:
        branch = branches[branch_name]
        desc = branch['desc'].strip()
        p(branch_name, desc)
    print()
    print(_('== Components =='))
    for comp_name in components:
        desc = components[comp_name]
        p(comp_name, desc)
    print()
    print(_('== Mirrors =='))
    for mirror_name in mirrors:
        mirror = mirrors[mirror_name]
        desc_short = mirror['desc'].split('\n')[0].strip()
        p(mirror_name, desc_short)


def show_help():
    print(HELP_MESSAGE.strip('\n'))

keywords = {
    'm': parse_mirror,
    'mirror': parse_mirror,
    'b': parse_branch,
    'branch': parse_branch,
    'c': parse_comp,
    'component': parse_comp,
}

conf_str = ''
if os.path.exists(CONF_PATH):
    with open(CONF_PATH, 'r') as conf_file:
        conf_str = conf_file.read()
conf_str = conf_str.strip()

if conf_str == '':
    conf_str = '{}'

conf = json.loads(conf_str)
create_set('mirror')
create_str('branch')
create_set('component')


def read_yaml_wrapper(path: str):
    if os.path.exists(path):
        with open(path, 'r') as mirrors_file:
            return yaml.safe_load(mirrors_file)
    else:
        logging.error(
            _('%s does not exist.'), MIRRORS_PATH)
        exit(2)
mirrors = read_yaml_wrapper(MIRRORS_PATH)
branches = read_yaml_wrapper(BRANCHES_PATH)
components = read_yaml_wrapper(COMPS_PATH)

sanitize_mirror()
sanitize_branch()
sanitize_component()

to_stdout = False
if len(full_args) > 0:
    if full_args[0] == 'stdout':
        to_stdout = True
        full_args = full_args[1:]
    elif full_args[0] == 'now':
        show_status()
        exit()
    elif full_args[0] == 'avail':
        show_available()
        exit()
    elif full_args[0] == 'help' or full_args[0] == '--help':
        show_help()
        exit()

current_function = None
pending_args = []
for arg in full_args:
    if arg not in keywords:
        pending_args.append(arg)
    else:
        if current_function is not None:
            current_function(pending_args)
        pending_args = []
        current_function = keywords[arg]

if current_function is not None:
    current_function(pending_args)

if parser_failed > 0:
    logging.info(
        _('%d error(s) occurred while parsing command line arguments.'),
        parser_failed)
    exit(2)

sanitize_mirror()
sanitize_branch()
sanitize_component()
recover_list_key()

suites = branches[conf['branch']]['suites']
comps = ' '.join(conf['component'])
output = ''
for index, mirror_name in enumerate(conf['mirror']):
    if index > 0:
        output += '\n'
    if mirror_name not in mirrors:
        continue
    mirror = mirrors[mirror_name]
    mirror_url = mirror['url']
    mirror_desc = mirror['desc'].strip().split('\n')
    if mirror_url.endswith('/'):
        mirror_url = mirror_url[:-1]
    output += '# [%s] %s\n' % (mirror_name, mirror_desc[0])
    if len(mirror_desc) > 1:
        output += '# %s\n' % ('\n# '.join(mirror_desc[1:]))
    for suite in suites:
        output += 'deb %s%s %s %s\n' % (mirror_url, DEBS_URL, suite, comps)

if to_stdout:
    print(output, end='')
else:
    try:
        with open(OUTPUT_PATH, 'w') as f:
            f.write(output)
        logging.info(_('Updated %s.'), OUTPUT_PATH)
    except PermissionError as e:
        logging.error(
            _('Failed to update %s: permission denied.'), OUTPUT_PATH)
        exit(1)

new_conf_str = json.dumps(conf, sort_keys=True).strip()
dirname = os.path.dirname(CONF_PATH)
try:
    if not os.path.exists(dirname):
        os.makedirs(dirname)
    if new_conf_str != conf_str:
        with open(CONF_PATH, 'w') as conf_file:
            conf_file.write(new_conf_str + '\n')
except PermissionError as e:
    logging.warn(
        _('Failed to save settings to %s: permission denied.'), CONF_PATH)
